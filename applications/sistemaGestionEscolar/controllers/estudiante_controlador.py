"""
Controller class to handle the form events and execute the necessary actions.
"""
import json
from repository import EstudiantesRepository
from render import Renderer

# The repository method is used to interact with the database
repository = EstudiantesRepository(db)

# The render method is used to generate for the visualization of these models.
renderizado = Renderer(db)


def estudiante():
    """
    function in charge of using the render class to visualize the student's model.
    """
    # the dictionary student_list is the one to be used to
    # display the list in estudiantes.html
    estudiantes_lista = renderizado.renderer_estudiantes()
    # Returns a dictionary to be used in the view
    return {"estudiantes_lista": estudiantes_lista}


def procesar_formulario():
    """
    function in charge of Processing the form that was generated by TypeScript.
    The form was submitted through an Ajax request for student enrollment.
    """
    try:
        # Get the form data through Ajax request
        data = json.loads(request.body.read().decode("utf-8"))

        # Extracts data from the JSON object
        nombre = data["nombre"]
        apellido = data["apellido"]

        # Uses the repository method to insert the data into the database.
        repository.create_estudiante(nombre, apellido)
 
        # Respond with a success message or otherwise with an error message
        return response.json({"message": "Formulario procesado con éxito"})
    except KeyError as e:
        return response.json({"error": f"Clave no encontrada: {str(e)}"})
    except json.JSONDecodeError as e:
        return response.json({"error": f"Error al decodificar JSON: {str(e)}"})


def actualizar_asistencias():
    """
    function in charge of recording attendance changes in the database.
    """  
    try: 
        # Get the form data through Ajax request
        data = json.loads(request.body.read().decode("utf-8"))

        # Extracts data from the JSON object
        id_estudiante_param = data["idEstudiante"]
        estado_param = data["valorSeleccionado"]

        # Uses the repository method to update the data in the database.
        repository.update_estudiante(id_estudiante_param, estado_param)

        # Respond with a success message or otherwise with an error message
        return response.json(
            {"message": "Se actualizó con éxito el estado del estudiante."})
    except KeyError as e:
        return response.json({"error": f"Clave no encontrada: {str(e)}"})
    except json.JSONDecodeError as e:
        return response.json({"error": f"Error al decodificar JSON: {str(e)}"})
